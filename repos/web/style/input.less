@import "_mixins";

@input-colors: primary;
@input-color: @color-text; // label + text
@input-color-inverse: @color-text-grey; // inverted label and border color
@input-color-active: @color-primary; // label and border color
@input-color-active-inverse: @color-primary-light; // inverted label and border color
@input-border: @border @color-bg-grey;
@input-background-color: transparent;
@input-background-color-interaction: transparent;
@input-padding-v: 0.8; // ratio
@input-padding-h: @input-padding-v * 1; // ratio
@input-padding-h-icon: 1.3; // ratio relative to standard padding
@input-padding-h-value: size(round(@input-padding-h * @size-base-px));
@input-padding-v-value: size(round(@input-padding-v * @size-base-px));
@input-line-height-fix: 1; // for consistent input height (this value depends on chosen font)
@input-font-size: @size-base;
@input-font-size-icon: @size-icon;
@input-font-size-large: @size-larger;
@input-font-size-large-icon: @size-icon-large;
@input-option-swatch-size: @size-icon-large;
// Floating Label Calculation
@input-help-size-ratio: 1;
@input-label-size-default-ratio: 1; // shown as placeholder
@input-label-size-ratio: 12/14; // minimized at the top
@input-label-line-height: 1.3;
@input-label-size: size(round(@input-label-size-ratio * px(@input-font-size))); // offset space for Label to sit at the top
@input-label-size-offset: @input-label-size + @input-padding-v-value + (@input-label-size-default-ratio - @input-label-size-ratio) * @input-label-line-height * @input-font-size;
// Color swatch
@input-swatch-width: size(40);
@input-swatch-height: size(36);
// Icons
@select-icons: ~'> i.icon.delete, > i.icon.dropdown, > i.icon.search, > i[class^="icon-"], > i[class*=" icon-"]';
@input-select-icon: ~'.text.icon, i[class^="icon-"], i[class*=" icon-"]';

// -----------------------------------------------------------------------------
// MIXINS ----------------------------------------------------------------------
// -----------------------------------------------------------------------------
.input-done {
  //border-color: fade(@input-color, 35%);
  //border-style: dashed;

  .inverted & {
    //border-color: fade(@input-color-inverse, 35%);
  }
}

.input-disabled {
  &:extend(.disabled all);
  pointer-events: none;
  opacity: 0.9;
}

.input-readonly {
  cursor: default;
  pointer-events: none;
  border-style: dotted !important;
}

.input-tag {
  &:extend(.margin-h-smallest all);
  &:extend(.margin-v-smaller all);
  &:extend(.button all);
  &:extend(.button.small all);
  background-color: @color-bg-white !important;
  border: @border-size dotted @color-text;
  text-transform: none;

  &.disabled,
  &.no-pointer {
    border-style: dotted;
  }
}

//label.required {
//  &:after {
//    content: '*';
//    display: inline-block;
//    margin-left: @margin-smaller;
//  }
//}

// -----------------------------------------------------------------------------
// DEFAULT INPUT ---------------------------------------------------------------
// -----------------------------------------------------------------------------
input {
  &:extend(.text.truncate all);

  &[type="number"] {
    -moz-appearance: textfield;

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button { // the increment number button
      display: none;
    }
  }

  &[type="date"],
  &[type="datetime-local"],
  &[type="time"],
  &[type="month"],
  &[type="week"] {
    //line-height: @input-line-height-fix;

    /* Fix to ensure consistent input height */

    &::-webkit-inner-spin-button { // the increment number button
      display: none;
    }

    &::-webkit-calendar-picker-indicator {
      display: none;
    }
  }

  &[type="color"] {
    &:extend(.no-padding);
    width: @input-swatch-width !important;
    height: @input-swatch-height !important;

    &:hover:not(:active) {
      &:extend(.pointer);
    }

    &:before {
      @offset: @border-size + size(1); // offset for border and focus outline
      &:extend(.position-absolute);
      &:extend(.object);
      top: @offset;
      left: @offset;
      right: @offset;
      bottom: @offset;
      border-radius: inherit;
      background-color: inherit; // use color set by Input on change
    }

    &[value=""] {
      &:extend(.swatch-null all);

      &:before {
        &:extend(.swatch-null all);
      }
    }
  }

  .text-center & {
    text-align: center;
  }
}

textarea {
  &:extend(.min-width-260 all);
}

.input__unit,
.ui.selection.dropdown,
input, select, textarea {
  &:extend(.transition all); // prevent flickering on hover of float fields
  .font(@size: @input-font-size; @lineHeight: normal; @weight: @font-weight);
  .scalePadding(@size: @input-font-size, @top: @input-padding-v, @left: @input-padding-h);
  color: @input-color;
  display: inline-flex;
  width: 100%; // this is needed for input to dynamically adjust to available width
  background-color: @input-background-color;
  border: @input-border;
  border-radius: @radius-base;
  -webkit-appearance: none;
  -moz-appearance: none;

  .inverted & {
    border-color: @input-color-inverse;
  }

  @{select-interaction} {
    opacity: 1;
    outline: 0;
    box-shadow: none; // overrides Semantic UI dropdown, but not default focus styling
    background-color: @input-background-color-interaction;
    border-color: @input-color-active;

    .inverted & {
      border-color: @input-color-active-inverse;
    }
  }

  &.readonly,
  &[readonly],
  &.disabled,
  &:disabled {
    @{select-interaction} {
      box-shadow: none;
      border-color: initial;
    }
  }

  &.disabled:not(.readonly),
  &:disabled {
    &:extend(.input-disabled all);

    + label {
      cursor: default;
    }

    @{select-icons} {
      opacity: 0.4;
    }
  }

  &.readonly {
    &:extend(.input-readonly all);

    + label {
      cursor: default;
    }
  }

  &:required {
    box-shadow: inherit; // fix for Firefox
  }

  + @{input-select-icon} {
    font-size: @size-icon; // ensure icon is crisp
  }

  &[type="checkbox"] {
    .square(@input-font-size);
    position: relative;
    border: @border @input-color;

    .inverted & {
      border-color: @input-color-inverse;
    }

    &:checked {
      border: none;

      &:before {
        &:extend(.position-center all);
        .icon(@icon-checkbox-filled);
        color: @input-color-active;
      }
    }

    + label {
      &:extend(.margin-left-smaller all);
      cursor: pointer;
    }
  }

  .large > & {
    font-size: @input-font-size-large;
    .scalePadding(@size: @input-font-size-large, @top: @input-padding-v, @left: @input-padding-h);

    // TBD: improvement - this does not target lefty icons
    + @{input-select-icon} {
      font-size: @input-font-size-large-icon;
    }
  }

  .round > & {
    border-radius: 999rem;
  }
}

.input__label {
  &:extend(.margin-smaller all);
  &:extend(.round all);
  &:extend(.bold);
  color: @input-color;
  font-size: @input-label-size-default-ratio * 100%; // use percent unit so it scales automatically
  line-height: @input-label-line-height;
  transition: @speed-transition * 1.5;

  .inverted & {
    color: @input-color-inverse;
  }
}

.input__label--float { // floating state above the input
  &:extend(.position-top-left all);
  padding: (@border-size * 2) (@input-padding-h-value / 2); // use half of padding when at the top
  font-size: @input-label-size-ratio * 100%; // use percent unit so it scales automatically
  background-color: @color-bg;

  .inverted & {
    background-color: @color-bg-inverse;
  }
}

// -----------------------------------------------------------------------------
// SEMANTIC UI OVERRIDE --------------------------------------------------------
// @Note: base style override /src/web/style/override/modules/dropdown.overrides
// -----------------------------------------------------------------------------
.input--dropdown__label--float { // label floating state
  &:extend(.no-margin-v all);
  &:extend(.input__label--float all);
}

.ui.selection.dropdown {
  &:extend(.flex--row.wrap all);
  &:extend(.min-height all);
  position: relative;
  display: flex !important;
  padding-right: @input-padding-h-value * 2 + @size-icon;

  // note: may cause too small width for compact dropdown because Label is positioned absolute
  // but is needed for most use cases to make width dynamic
  min-width: min-content;

  &.visible {
    //display: flex !important; // do not apply this because Semantic UI gives weird input layout in non .multiple case
  }

  // Non Multiple Search input fixes
  &:not(.multiple) {
    > .text.default {
      &:extend(.no-padding all);
      left: 0;
      line-height: normal; // quick fix, seems to work
    }
  }

  .visible.menu.transition {
    .input--wrapper.float > & {
      &:extend(.padding-bottom all); // offset when dropdown is above, and overlays float label
    }
  }

  .input--wrapper.float > & {
    margin-top: @input-label-size; // offset label size
  }

  .input--wrapper.float & {
    &:extend(.full-width all);
  }

  // Default State
  &:not(.active) {
    > .text.default {
      .labeled.float & {
        opacity: 0;
      }
    }

    + .input__label {
      &:extend(.position-top-left all);
      top: @input-label-size-offset; // offset label size
      pointer-events: none; // make clicking input set focus immediately

      .input--wrapper:not(.done) & {
        &:extend(.no-margin all); // need for multiple
        &:extend(.no-padding-v all); // need for multiple
      }
    }
  }

  // Filled State
  &.multiple:not(.active):not(:hover) {
    .input--wrapper.done & {
      border-color: transparent;

      @{select-icons} {
        opacity: 0;
      }
    }
  }

  // Show floated Label when Dropdown is in Focus or has values
  // .active class appears when Dropdown is in focus
  &.active,
  .input--wrapper.done & {
    + .input__label {
      &:extend(.input--dropdown__label--float all);
    }
  }

  // Make Label overlay border
  &:not(.multiple) + .input__label { // single selection may have border shown in completed state
    .input--wrapper.done & {
      z-index: 1; // must be under 10 to not overlay other dropdowns
    }
  }

  &.active,
  .input--wrapper.done:hover & { // multiple selection will always have border removed in completed state
    + .input__label {
      z-index: 11 !important; // to override Semantic menu styling z-index of 10
    }
  }

  // Padding syncing:
  + .input__label,
  > .text.default,
  @{select-icons} {
    .scalePadding(@size: @input-font-size, @top: @input-padding-v, @left: @input-padding-h);
  }

  &.loading {
    @{select-icons} {
      &:extend(.spin all);
      .scalePadding(@size: @input-font-size, @top: @input-padding-v, @left: @input-padding-h) !important;
      height: initial !important;

      // Remove Semantic UI styling
      &:before {
        content: @icon-dropdown-spinner;
        border: none;
        position: initial;
        top: initial;
        left: initial;
        margin: initial;
        width: initial;
        height: initial;
        border-radius: initial;
      }

      &:after {
        display: none;
      }
    }
  }

  &.compact {
    padding-right: @input-padding-h-value + @size-icon;

    + .input__label,
    > .text.default,
    @{select-icons} {
      .scalePadding(@size: @input-font-size, @top: @input-padding-v, @left: @input-padding-h / 2);
    }
  }

  @{select-icons} {
    &:extend(.position-absolute);
    &:extend(.no-margin all);
    &:extend(.no-outline all);
    top: @border-size;
    right: @border-size;
    opacity: @icon-opacity;
    font-size: @size-icon;
    color: @input-color;

    .inverted & {
      color: @input-color-inverse;
    }
  }

  // placeholder
  > .text.default,
  > .text.divider { // shown when value is not in Dropdown options
    // placeholder is rendered as absolutely positioned element when input has value inside Search Dropdown
    &:extend(.no-margin all);
    line-height: inherit;
    padding-right: @input-padding-h-value + @size-icon;
  }

  // Compact Select Dropdown
  &:not(.search) > .text.default { // is positioned relatively by default
    &:extend(.no-padding all);
  }

  // .multiple.dropdown - Semantic UI makes the input position `static` after chosen choices in <a> tags
  // non .multiple.dropdown - Semantic makes it position `absolute` behind chosen text
  input.search { // input
    &:extend(.no-margin all);
    line-height: inherit !important;
  }

  // Align input placeholder with cursor when start typing inside single search dropdown
  &.search:not(.multiple) > input.search[value=""] {
    padding: inherit;
  }

  ~ .field-help {
    &:extend(.input__field-help all);
  }

  &.info.active,
  &.error {
    + .field-help,
    + .input__label + .field-help {
      &:extend(.fade-in-down all);
    }
  }

  &.error {
    .input--wrapper.float.labeled & {
      &:extend(.bg-transparent);
    }
  }
}

.input--dropdown__option {
  .app__image {
    width: @input-option-swatch-size;
  }
}

.input--dropdown__option__color {
  &:extend(.margin-right-small all);
  .circle(@input-option-swatch-size);
  vertical-align: bottom;
}

// -----------------------------------------------------------------------------
// STANDARD INPUT WRAPPER ------------------------------------------------------
// -----------------------------------------------------------------------------
.input--wrapper {
  label {
    &:extend(.input__label all);
  }

  &.bold {
    input,
    select, textarea {
      &:extend(.bold);
    }
  }

  &.done {
    input.readonly,
    select.readonly,
    textarea.readonly,
    .ui.selection.dropdown:not(.active):not(:hover),
    input:not(:focus):not(:hover),
    select:not(:focus):not(:hover),
    textarea:not(:focus):not(:hover) {
      &:extend(.input-done all);
    }
  }

  input:disabled,
  select:disabled,
  textarea:disabled {
    &:extend(.input-done all);
  }

  &.resize {
    textarea {
      resize: none;
    }
  }

  &.swatch {
    &:extend(.flex--row);
    &:extend(.flex--row.middle);
    &:extend(.flex--row.justify);
  }

  .ui.selection.dropdown.readonly {
    .label {
      &:extend(.input-tag all);
      box-shadow: none;

      .icon.delete {
        display: none;
      }
    }

    > .icon.dropdown {
      display: none;
    }
  }

  &.fill-width {
    input, select, textarea, .ui.selection.dropdown {
      &:extend(.full-width all);
    }
  }

  .loading.ui.selection.dropdown {
    position: relative;
    top: initial;
    left: initial;
  }

  .field-help {
    &:extend(.input__field-help all);
  }

  .input {
    &.info.active,
    &.error {
      & ~ .field-help {
        &:extend(.fade-in-down all);
      }
    }

    &.error {
      input {
        border-color: @color-error !important;

        .inverted & {
          border-color: @color-error-light !important;
        }

        &:focus {
          .outline(@color: @color-focus-error; @color-inverse: @color-error-light);
        }
      }
    }
  }

  @{select-interaction} {
    .input__delete {
      &:extend(.appear all);
    }
  }

  @{input-select-icon} {
    font-size: @input-font-size-icon; // hard code size to ensure icon is crisp
  }
}

div.input,
div.select {
  &:extend(.flex--row);
  &:extend(.flex--row.middle);

  &.disabled, &.disabled > * {
    //color: fade(@color-primary, 80%) !important;

    .inverted & {
      //color: fade(@color-primary-light, 80%) !important;
    }
  }

  &.icon {
    font-size: inherit; // prevent Semantic UI override

    @{input-select-icon} {
      &:extend(.no-outline all);
      z-index: 1;

      &.pointer {
        @{select-interaction} {
          // todo
        }
      }
    }

    &.top {
      @{input-select-icon} {
        .padding-v(@input-padding-v-value);
      }
    }

    /* Base Size */

    &:not(.large) {
      @padding: size(round(px(@input-font-size-icon + @input-padding-h-value * @input-padding-h-icon)));
      @offset: @input-padding-h-value;
      @margin: @input-font-size-icon + @offset;
      .iconPosition(@padding; @offset; @margin;)
    }

    &.large {
      @ratio: @input-font-size-large / @input-font-size;
      @padding: size(round(px(@input-font-size-large-icon + @input-padding-h-value * @input-padding-h-icon * @ratio)));
      @offset: size(round(px(@input-padding-h-value * @ratio)));
      @margin: @input-font-size-large-icon + @offset;
      .iconPosition(@padding; @offset; @margin;);
    }

    .iconPosition(@padding; @offset; @margin;) {
      @iconPadding: @input-padding-v-value;
      @iconOffsetBefore: @margin + @iconPadding;
      @iconOffsetAfter: @offset - @iconPadding;

      @{input-select-icon} {
        padding: @iconPadding;
      }

      &:not(.lefty) {
        .input__unit,
        input, select, textarea {
          padding-right: @padding
        }

        @{input-select-icon} {
          margin-left: -@iconOffsetBefore;
          margin-right: @iconOffsetAfter;
        }
      }

      &.lefty {
        .input__unit,
        input, select, textarea {
          padding-left: @padding;

          // floated label
          &:placeholder-shown:not(:focus) ~ label {
            padding-left: @padding;
          }
        }

        @{input-select-icon} {
          margin-right: -@iconOffsetBefore;
          margin-left: @iconOffsetAfter;
        }
      }
    }
  }

  &.unit {
    z-index: 0; // to show unit with z-index -1
  }

  .inverted & {
    .colors(@colors: @input-colors; @property: border-color; @suffix: '-light'; @postSelector:  ~'*');
    .colors(@colors: @input-colors; @property: color; @suffix: '-light'; @postSelector:  ~'*');
  }
}

div.select {
  &:extend(.flex--row);
  &:extend(.flex--row.middle);

  &:after { // :after does not work on <select> so have to apply to wrapper
    @offset: (@input-padding-h-value * @size-smaller / @input-font-size);
    .icon(@icon-chevron-down);
    font-size: @size-smaller;
    margin-left: -(@offset + @size-smaller);
    margin-right: @offset; // fix negative margin layout
    position: relative;
    z-index: 0;
  }

  select {
    position: relative;
    z-index: 1;
    // add padding for icon (this one is more compact than normal icon)
    padding-right: size(round(px(@input-font-size-icon + @input-padding-h-value)));
    //line-height: @input-line-height-fix;
  }
}

.input__delete {
  &:extend(.margin-h-smaller);
  &:extend(.button.small all);
  &:extend(.button.circle all);
  &:extend(.button.circle.small all);
  &:extend(.appear-on-hover all);
  background-color: @color-white !important;

  .inverted & {
    background-color: @color-black !important;
  }
}

/* Hidden Input Value Text to display Unit */
.input__unit {
  &:extend(.position-left all);
  &:extend(.flex--row);
  &:extend(.fade--quarter);
  &:extend(.overflow-hidden);
  max-width: 100%;
  z-index: -1;
  background-color: transparent !important;
  border-color: transparent !important;

  > .invisible {
    margin-right: @size-base-space;
  }
}

/* Input Helper Info */
.input__field-help {
  font-size: size(round(px(@input-font-size) * @input-help-size-ratio));
  padding: @padding-smaller @input-padding-h-value;
  opacity: 0;

  .error {
    &:extend(.text.error all);
    //display: none; // hide error by default, and show when .error class is added to input (in static html)
  }
}


// -----------------------------------------------------------------------------
// FLOAT LABEL INPUT -----------------------------------------------------------
// https://github.com/tonystar/float-label-css/blob/master/scss/float-label.scss
//
// @example:
//  <View className='float-label'>
//    <Input type="email" name="email" aria-describedby="emailHelp" placeholder="email@example.com" required>
//    <Label htmlFor="email">Email</Label>
//    <small id="emailHelp" class="field-help">
//      <span class="error">Please enter a valid Email address.</span>
//      Your info is safe with us, see our <a href="/privacy" tabindex="-1">Privacy Policy</a>.
//    </small>
//  </View>
// -----------------------------------------------------------------------------
.input--wrapper.float .input {
  font-size: @input-font-size;
  padding-top: @input-label-size;

  label {
    &:extend(.no-margin-v all);
    &:extend(.text.truncate all);
    &:extend(.input__label--float all);
    cursor: text;
  }

  input, select, textarea {
    height: auto;
    font-size: inherit;

    // Toggle placeholder visibility
    &::placeholder {
      opacity: 1;
    }

    // Hide placeholder when not in focus
    &:placeholder-shown:not(:focus)::placeholder {
      opacity: 0;
    }

    // Default Label state - when not in focus, and not autofilled, show label as big text sitting inside input
    &:placeholder-shown:not(:focus) { // this version works cross browser but does not exclude `autofill`
      //&:placeholder-shown:not(:focus):not(:-webkit-autofill) { // this does not work on FireFox
      ~ label {
        // Move <label> from the top because the bottom may have dynamic height from help text
        // The label text will get bigger so we need to offset the differences in sizes
        // and top padding to make it sit at the same level as input text
        &:extend(.bg-transparent all);
        &:extend(.input__label all);
        &:extend(.no-margin all);
        pointer-events: none; // make clicking input set focus immediately
        top: @input-label-size-offset - size(@border-size);
        padding: 0 @input-padding-h-value; // match input padding
        font-weight: normal;
        line-height: @input-line-height-fix;
      }
    }
  }

  select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    padding-right: 1em;
    background: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23333' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E") no-repeat right .5em bottom .25em;
    background-size: 8px 10px;
  }
}

// -----------------------------------------------------------------------------
// FILLED INPUT SUMMARY DISPLAY ------------------------------------------------
// -----------------------------------------------------------------------------
// Uncomment the block below to enable Summary style for completed fields
/*.input--wrapper.done {
  // Completed state
  .ui.selection.dropdown:not(.active):not(:hover) {
    border-color: transparent;

    + .input__label {
      &:extend(.bold all);
      &:extend(.no-margin all);
      &:extend(.no-padding-v all);
    }

    @{select-icons} {
      opacity: 0;
    }
  }

  input:not(:focus) {
    &:extend(.bg-transparent all);
    border: none;

    ~ label {
      &:extend(.bold all);
      &:extend(.no-margin-left all);
      &:extend(.bg-transparent all);
    }

    ~ @{input-select-icon} {
      &:not(.dropdown) {
        display: none;
      }
    }
  }
}*/

// -----------------------------------------------------------------------------
// DISABLE AUTOFILL BACKGROUND COLOR -------------------------------------------
// -----------------------------------------------------------------------------
@-webkit-keyframes autofill {
  to {
    color: @color-text;
    background: transparent;
  }
}

@-webkit-keyframes autofill-inverse {
  to {
    color: @color-text-inverse;
    background: transparent;
  }
}

input {
  &:-webkit-autofill {
    -webkit-animation-name: autofill;
    -webkit-animation-fill-mode: both;

    .inverted & {
      -webkit-animation-name: autofill-inverse;
    }
  }
}


// -----------------------------------------------------------------------------
// CHECKBOX - TOGGLE (with custom true / false text)
// -----------------------------------------------------------------------------
@checkbox-size: size(30); // height of the whole checkbox label - looks better without matching button height
@checkbox-font-size: @size-base;
@checkbox-padding-size: size(3); // padding around label
@checkbox-border-size: size(@border-size); // border around label
@checkbox-button-size: @checkbox-size - @checkbox-border-size * 2; //  - size(@checkbox-padding-size * 6) width of the circle
@checkbox-button-offset-border: -@checkbox-border-size;
@checkbox-button-offset-label: @checkbox-border-size + @checkbox-padding-size; // offset padding for label text
@checked-bg-color: @input-color-active; // checked toggle color
@checked-border-color: @checked-bg-color; // checked toggle color
@unchecked-bg-color: transparent; // unchecked toggle color
@unchecked-border-color: @input-color; // unchecked toggle color
@checked-bg-color-inverse: fade(@input-color-active-inverse, 50%);
@checked-border-color-inverse: @checked-bg-color-inverse;
@unchecked-bg-color-inverse: fade(@input-color-inverse, 50%);
@unchecked-border-color-inverse: @unchecked-bg-color-inverse;

/* Base Styling */
input.checkbox {
  margin-right: @margin-smaller;
}

/* Base Styling */
input.checkbox.toggle {
  position: absolute;
  opacity: 0;
  left: -999999px; // IE8 fix because opacity does not work

  + label { // slide container
    position: relative;
    margin-left: 0; // override default label styling
    cursor: pointer;
    user-select: none;
    background-color: @unchecked-bg-color;
    border: @checkbox-border-size solid @unchecked-border-color;
    -webkit-backface-visibility: hidden; // smooth the edges for Chrome when using `transform`
  }

  &:not(:checked) {
    + label {
      .inverted & {
        background-color: @unchecked-bg-color-inverse;
        border-color: @unchecked-border-color-inverse;
      }

      &.danger {
        background-color: @color-red;

        .inverted & {
          background-color: @color-red-light;
        }
      }
    }
  }

  &:checked { // true state
    + label { // slide container
      background-color: @checked-bg-color;
      border-color: @checked-border-color;

      .inverted & {
        background-color: @checked-bg-color-inverse;
        border-color: @checked-border-color-inverse;
      }
    }
  }

  @{select-interaction} {
    + label {
      &:extend(.outline all);
      border-color: @color-primary !important;

      .checkbox__button {
        &:extend(.outline all);
      }

      .inverted & {
        border-color: @color-primary-light !important;
      }
    }
  }

  &:disabled + label {
    &:extend(.input-disabled all);
    opacity: 0.5;

    .inverted & {
      background-color: transparent !important;
      border-color: @color-border-light !important;
    }
  }

  &[readonly] + label {
    &:extend(.input-readonly all);
    pointer-events: initial !important; // for tooltip to work
  }
}

/* Custom Design */
input.checkbox.toggle {
  + label { // slide container
    //.text-shadow();
    .font-size(@checkbox-font-size);
    //&:extend(.uppercase);
    border-radius: @checkbox-size !important;
    //border-color: transparent !important;
    white-space: nowrap;
    width: auto;
    height: @checkbox-size;
    //color: @color-white;
    text-align: left;

    .inverted & {
      color: @color-text-inverse;
    }

    .checkbox__true,
    .checkbox__button,
    .checkbox__false {
      display: inline-block;
      overflow: hidden;
    }

    .checkbox__button {
      .circle(@checkbox-button-size) !important;
      position: relative;
      //z-index: -1; // for overlay effect
      //.margin(@checkbox-padding-size * 2);
      margin-left: @checkbox-button-offset-border;
      margin-right: @checkbox-button-offset-label;
      content: '';
      border: inherit;
      -webkit-backface-visibility: hidden; // smooth the edges for Chrome when using `transform`

      .inverted & {
        background: @color-text-inverse;
      }
    }

    .checkbox__true,
    .checkbox__false {
      .margin-v(@checkbox-padding-size * 2);
      .margin-h(@checkbox-padding-size * 4);

      @{input-select-icon} {
        .font-size(@size-smaller);
        margin: 0;
      }
    }

    .checkbox__true {
      display: none;
    }

    .checkbox__false {
      display: flex;
      margin-left: @checkbox-padding-size;
    }
  }

  &:checked { // true state
    + label { // slide container
      &:extend(.text.bold);
      &:extend(.text-shadow);
      text-align: right;
      color: @color-white;

      .checkbox__true {
        display: flex;
        margin-right: @checkbox-padding-size;
      }

      .checkbox__false {
        display: none;
      }

      .checkbox__button {
        margin-left: @checkbox-button-offset-label;
        margin-right: @checkbox-button-offset-border;
        background: @color-white;
      }
    }
  }
}
