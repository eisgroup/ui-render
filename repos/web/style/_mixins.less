// =============================================================================
// REUSABLE MIXINS
// =============================================================================
@import "_variables";
@import "fonts/icons/variables";

// -----------------------------------------------------------------------------
// FUNCTIONS
// -----------------------------------------------------------------------------

.function {
  /**
   * Convert Unitless Value into REM Equivalent
   * @example:
   *   height: size(160);  // >>> `height: 10rem;`
  */
  .size(@value) {
    return: unit(@value / 16 / @size-scale * 100, rem);
  }
  /**
   * Convert REM value to Pixel equivalent
   * @example:
   *   @pixel: px(1rem);  // >>> `16px;`
   */
  .px(@rem) {
    return: unit(@rem * @size-scale / 100 * 16, px);
  }
}


// -----------------------------------------------------------------------------
// LAYOUT
// -----------------------------------------------------------------------------
.margin(@value: @margin-base;) {
  margin: @value;
}

.margin-h(@value: @margin-base;) {
  margin-left: @value;
  margin-right: @value;
}

.margin-v(@top: @margin-base; @bottom: @top;) {
  margin-top: @top;
  margin-bottom: @bottom;
}

.padding(@y: @padding-base; @x: @y;) {
  .padding-v(@y);
  .padding-h(@x);
}

.padding-h(@left: @padding-base; @right: @left;) { // Only define first parameter to use multiple arguments
  padding-left: @left;
  padding-right: @right;
}

.padding-v(@top: @padding-base; @bottom: @top;) { // Only define first parameter to use multiple arguments
  padding-top: @top;
  padding-bottom: @bottom;
}

// -----------------------------------------------------------------------------
// TEXT
// -----------------------------------------------------------------------------

// Load fonts from Google server
.loadGoogleFonts(@googleFontRequest) {
  @import (css) url('https://fonts.googleapis.com/css?family=@{googleFontRequest}');
}

// @font-face Definition
.font-face(@family: @font-family-base-name; @file: @family; @weight: normal; @style: normal;
        @path: @path-fonts; @svg-id: @file; @version: @version;) {
  @font-face {
    font-family: '@{family}';
    src: url('@{path}/@{file}.eot?@{version}');
    src: url('@{path}/@{file}.eot?@{version}#iefix') format('embedded-opentype'),
    url('@{path}/@{file}.woff?@{version}') format('woff'),
    url('@{path}/@{file}.ttf?@{version}') format('truetype'),
    url('@{path}/@{file}.svg?@{version}#@{svg-id}') format('svg');
    font-weight: @weight;
    font-style: @style;
  }
}

// Font & Line Height
.font(@size: @size-base; @style: normal; @family: @font-family-base; @weight: @font-weight; @lineHeight: normal;) {
  font-size: @size;
  font-style: @style;
  font-family: @family;
  font-weight: @weight;
  line-height: @lineHeight;
}

// Font Size
// Can set font size in any unit: px, rem, em, %, inherit, or unitless number
// Outputs REMs with PX fallback for older browsers, or other units if not applicable
.font-size(@i: @size-base) {
  @emToPx: unit((16/100*@size-scale)); // remove %
  @pxToEm: (1 / @emToPx);
  .runChecks() when not (isnumber(@i)) {
    @baseOutput: @i;
  }
  .runChecks() when (isnumber(@i)) {
    @tempBaseOutput: (@i * unit(1, @default-unit));
    @passedRem: isunit(@i, 'rem'); //a bug with rem required this extra step
    .checkRem() when not (isunit(@tempBaseOutput, 'rem')) and not (@passedRem) {
      //keeps passed in non-rem unit or sets to default when non rem
      @baseOutput: (@i * unit(1, @default-unit));
    }
    .checkRem() when (isunit(@tempBaseOutput, 'rem')), (@passedRem) {
      //keeps passed in rem unit and value
      //or sets to a default rem unit but uses passed value for px value
      @remBaseAdj: unit(`(('@{default-unit}' == 'rem' & @{passedRem} == true) ? 1 : @{pxToEm} )`);
      @baseOutput: unit((@i * @remBaseAdj), rem);
      font-size: unit(@i, px) * (@emToPx * @remBaseAdj);
    }
    .checkRem();
  }
  .runChecks();
  font-size: @baseOutput;
}

// Icon Font
.icon(@content: ''; @lineHeight: 1;) {
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: '@{icomoon-font-family}' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: @lineHeight;
  content: @content;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// Text
.text-highlight(@opacity: 0.35; @x: 0px; @y: -1px; @blur: 0px;) {
  text-shadow: @x @y @blur rgba(255, 255, 255, @opacity);
}

.text-shadow(@opacity: 0.35; @x: 0px; @y: 1px; @blur: 0px;) {
  text-shadow: @x @y @blur rgba(0, 0, 0, @opacity);
}

.text-truncate(@maxWidth: 100%) {
  max-width: @maxWidth;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.bold() {
  font-weight: @font-weight-bold;
}

// -----------------------------------------------------------------------------
// COLORS
// -----------------------------------------------------------------------------

/**
 * Create color classes
 @example:
    .text {
        .colors(@colors: primary, secondary, green, red);
        .colors(@colors: red; @pseudo: ~':before');  // adds .red:before { color: red; }
        .colors(box-shadow; 0 0 4px black, 0 0 5px; blue);  // adds .blue { box-shadow; 0 0 4px black, 0 0 5px blue; }
    }
    >>> className='text primary'
 *
 * @param [property] - css property to style
 * @param [pseudo] - property pseudo selector
 * @param [values] - prefix values to add, e.g. '0 0 4px' - useful for box-shadow with color values appended
 * @param [suffix] - @color variable name suffix to use (e.g. '-light' will use @color-light)
 * @param [preSelector] - selector before @colors class name, default is '&.' - apply color classes to the same element
 * @param [postSelector] - selector after @colors class name, default is '' - none (can be used to target parent)
 */
.colors(
  @colors: @all-colors;
  @property: color;
  @pseudo: ~'';
  @values: ~'';
  @suffix: '';
  @preSelector: ~'&.';
  @postSelector: ~'';
  @i: length(@colors);
) when (@i > 0) {
  @color: extract(@colors, @i); // color
  @colorVar: ~'color-@{color}@{suffix}'; // we use @color-name defined in _variables.less, instead of plain colors
  @{preSelector}@{color}@{pseudo} @{postSelector} {
      @{property}: @values @@colorVar;
  }
  .colors(@colors; @property; @pseudo; @values; @suffix; @preSelector; @postSelector; (@i - 1);); // iterate
}

// Button Color
.btn-color(@background: @color-button; @color: @color-white; @border: @background;) {
  color: @color;
  background: @background;
  border-color: darken(@border, 3%);
  &:hover,
  &:focus,
  &:active {
    color: darken(@color, 3%);
    background: darken(@background, 3%);
    border-color: darken(@border, 7%);
    //border-style: dotted;
    outline: 0;
  }
}

.btn-colors() {
  &.btn-primary,
  &.primary {
    .btn-color(transparent, @color-black, @color-black);
  }
  &.btn-secondary,
  &.secondary {
    .btn-color(transparent, @color-white, @color-white);
  }
  &.blue {
    .btn-color(@color-blue);
  }
  &.blue-light {
    .btn-color(@color-blue-light);
  }
  &.cyan {
    .btn-color(@color-cyan);
  }
  &.green {
    .btn-color(@color-green);
  }
  &.lime {
    .btn-color(@color-lime);
  }
  &.yellow {
    .btn-color(@color-yellow);
  }
  &.orange {
    .btn-color(@color-orange);
  }
  &.red {
    .btn-color(@color-red);
  }
  &.black {
    .btn-color(rgba(0, 0, 0, 0.85));
  }
  &.grey-dark {
    .btn-color(@color-grey-dark);
  }
  &.grey {
    .btn-color(@color-grey);
  }
  &.grey-light {
    .btn-color(@color-grey-light, @color-black);
  }
  &.white {
    .btn-color(@color-white, @color-black);
  }
  &.transparent {
    .btn-color(transparent, @color-link);
  }
  &.transparent.border {
    .btn-color(transparent, @color-black, @color-black);
  }
  &.inverse {
    color: @color-text-inverse;
  }
}

// Text Color Like Link
.click-color(@color: @color-link; @hover: lighten(@color-link, 7%); @active: darken(@color-link, 7%);) {
  color: @color;
  cursor: pointer;
  &:hover, &:focus {
    color: @hover;
  }
  &:active {
    color: @active;
  }
}

.inverse-colors(@foreground: @color-text-inverse; @background: @color-bg-inverse) {
  color: @foreground;

  a {
    .click-color(@color-link-inverse);
  }

  input, select, textarea {
    color: @foreground;
  }

  /* Bootstrap overrides */
  //.navbar-collapse ul li a {
  //  color: @foreground;
  //  //background: @background;
  //}
  //.navbar-collapse ul li a {
  //  border-bottom-color: @color-border;
  //}
}


.box-highlight(@opacity: 0.15; @x: 0px; @y: -1px; @blur: 1px;) {
  box-shadow: @x @y @blur rgba(255, 255, 255, @opacity);
}

.box-shadow(@opacity: 0.15; @x: 0px; @y: 1px; @blur: 1px;) {
  box-shadow: @x @y @blur rgba(0, 0, 0, @opacity);
}

.inner-shadow(@opacity: 0.15; @x: 0px; @y: 1px; @blur: 1px;) {
  box-shadow: inset @x @y @blur rgba(0, 0, 0, @opacity);
}

.fade(@opacity: 0.5) {
  opacity: @opacity !important;

  &:hover, &:active, &:focus {
    opacity: 1 !important;
  }
}

.outline(@color: @color-primary; @color-inverse: @color-primary-light; @radius: @radius-base;) {
  outline: none !important;
  box-shadow: inset 0 0 0 1px @color;
  border-radius: @radius;

  .inverted & {
    box-shadow: inset 0 0 0 1px @color-inverse;
  }
}

.no-outline() {
  outline: none !important;
  box-shadow: none !important;
}

// -----------------------------------------------------------------------------
// COMMON STYLING
// -----------------------------------------------------------------------------

// Avatar
.avatar(@size: 60px; @radius: 50%; @border: @border-base;) {
  .square(@size);
  border-radius: @radius;
  border: @border;
}

// Border
.border(@value: @border-base;) {
  border: @value;
}

// Border gradient with `border-radius`
.borderGradientRounded(
  @gradient: linear-gradient(to right, transparent, @color-primary);
  @gradientLight: linear-gradient(to right, transparent, @color-primary-light);
  @radius: @radius-base;
  @width: 1px;
  @selector: ~'&:before';
) {
  background-clip: padding-box;
  border-color: transparent;
  @{selector} {
    content: ' ';
    position: absolute;
    top: -@width;
    bottom: -@width;
    left: -@width;
    right: -@width;
    z-index: -1;
    background-image: @gradient;
    border-radius: @radius;

    .inverted & {
      background-image: @gradientLight;
    }
  }
}

// Background Image
.background-image(@name: 'logo.svg'; @size: cover; @path: @path-images; @position: center;) {
  @image: ~"@{path}/@{name}";
  background-image: url(~'"@{image}"');
  background-size: @size;
  background-position: @position;
}

// Create background image classes based on list of file names
// Example Usage:
// @files: live-now, live-later, die;
// .background-images(@files, jpg, ~':before');
.background-images(@file-names; @ext: jpg; @pseudo: ~''; @size: cover; @path: @path-images; @prefix: background-;
                    @i: length(@file-names); ) when (@i > 0) {
  @file-name: extract(@file-names, @i); // each file name
  .@{prefix}@{file-name}@{pseudo} {
    .background-image(~'@{file-name}.@{ext}'; @size; @path;);
    & when (@pseudo = ~':before') {
      content: '';
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      z-index: -1;
    }
  }
  .background-images(@file-names; @ext; @pseudo; @size; @path; @prefix; (@i - 1);) // iterate
}

// Create x number of background image classes
.loop-background-image(@count; @class; @file-name: @class; @join: -; @ext: jpg) when (@count > 0) {
  .loop-background-image(@count - 1; @class; @file-name; @join; @ext); // iterator

  .@{class}@{join}@{count} {
    .background-image(~'@{file-name}@{join}@{count}.@{ext}');
  }
}

.loop-background-image-before(@count; @class; @file-name: @class; @join: -; @ext: jpg) when (@count > 0) {
  .loop-background-image-before(@count - 1; @class; @file-name; @join; @ext); // iterator
  // Parent element needs to have position relative or fixed
  .@{class}@{join}@{count}:before {
    .background-image(~'@{file-name}@{join}@{count}.@{ext}');
    content: '';
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    z-index: -1;
  }
}

// Image
.background-image-retina(@file-1x; @file-2x; @size: cover; @path: @path-images;) {
  .background-image(@file-1x, @size, @path);

  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (   min--moz-device-pixel-ratio: 2), only screen and (     -o-min-device-pixel-ratio: 2/1), only screen and (        min-device-pixel-ratio: 2), only screen and (                min-resolution: 192dpi), only screen and (                min-resolution: 2dppx) {
    .background-image(@file-2x, @size, @path);
  }
}

// Clear
.clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Logo - Limit max Width and Height
.logo-wrap (@maxWidth: @logo-max-width; @maxHeight: @logo-max-height; @background: @color-bg;) {
  /* effective width/height is minus borders and padding */
  /* apply to immediate wrapper for <img class="logo img-responsive" /> tag */
  width: @maxWidth;
  min-width: @maxWidth; /* Firefox fix */
  max-width: @maxWidth; /* Firefox fix */
  padding: (@maxWidth / 20);
  background: @background;
  border-radius: @maxWidth / 40;
  border: 1px solid darken(@background, 20%);
  > img {
    max-height: (@maxHeight - (@maxWidth / 20)*2 - 2); /* max img height is maxHeight minus padding and borders */
  }
}

.pointer(@value: pointer;) {
  cursor: @value;
}

/* Scale according to screen size */
.scale(@property; @minValue; @maxValue; @breakPoints: 1; @minScreen: 0px; @maxScreen: 2560px;) when (@breakPoints >= 0) {
  @media screen and (min-width: @minScreen) {
      @{property}: @minValue;
  }
  // Update values for next iteration
  @minValueNext: @minValue + ((@maxValue - @minValue) / @breakPoints);
  @minScreenNext: floor(@minScreen + ((@maxScreen - @minScreen) / @breakPoints));
  .scale(@property; @minValueNext; @maxValue; @breakPoints - 1; @minScreenNext; @maxScreen;); // iterate
}

/* Scale Padding according to text size */
.scalePadding(@size: @size-base; @top: 0.5; @left: (@top * 1.5); @bottom: @top; @right: @left;) {
  @px: px(@size);
  padding: size(round(@top * @px)) size(round(@right * @px)) size(round(@bottom * @px)) size(round(@left * @px));
}

.square(@size) {
  width: @size;
  height: @size;
}

.circle(@size) {
  .square(@size);
  border-radius: 50%;
}

// Resize
.resizable(@direction: both) {
  // Options: horizontal, vertical, both
  resize: @direction;
  // Safari fix
  overflow: auto;
}

// -----------------------------------------------------------------------------
// OBJECTS DRAWN BY CSS
// -----------------------------------------------------------------------------

// General
.object(@display: block, @content: '') {
  display: @display;
  content: @content;
}

// Triangles
.triangle-up(@height: @size-base; @color: inherit;) {
  @size: (@height / 2);
  .object();
  width: 0;
  height: 0;
  border-left: ~'@{size}px' solid transparent;
  border-right: ~'@{size}px' solid transparent;
  border-bottom-style: solid;
  border-bottom-width: ~'@{size}px';
  border-bottom-color: @color; /* to use inherit border color must be declared separately */
}

.triangle-down(@height: @size-base, @color: inherit) {
  @size: (@height / 2);
  .object();
  width: 0;
  height: 0;
  border-left: ~'@{size}px' solid transparent;
  border-right: ~'@{size}px' solid transparent;
  border-top-style: solid;
  border-top-width: ~'@{size}px';
  border-top-color: @color; /* to use inherit border color must be declared separately */
}

.triangle-left(@height: @size-base, @color: inherit) {
  @size: (@height / 2);
  .object();
  width: 0;
  height: 0;
  border-top: ~'@{size}px' solid transparent;
  border-bottom: ~'@{size}px' solid transparent;
  border-right-style: solid;
  border-right-width: ~'@{size}px';
  border-right-color: @color; /* to use inherit border color must be declared separately */
}

.triangle-right(@height: @size-base, @color: inherit) {
  @size: (@height / 2);
  .object();
  width: 0;
  height: 0;
  border-top: ~'@{size}px' solid transparent;
  border-bottom: ~'@{size}px' solid transparent;
  border-left-style: solid;
  border-left-width: ~'@{size}px';
  border-left-color: @color; /* to use inherit border color must be declared separately */
}

// Button Block
.btn-block(@size: 22px, @radius: @radius-base) { /* Used for :before and :after */
  content: '';
  position: absolute;
  top: 50%; /* move it down to center */
  margin-top: -(@size / 2); /* align block in the middle */
  width: @size; /* same as height */
  height: @size; /* button_outer_height / sqrt(2) */
  background: inherit; /* use parent background */
  border: inherit; /* use parent border */
  border-left-color: transparent; /* hide left border */
  border-bottom-color: transparent; /* hide bottom border */
  border-radius: 0 @radius 0 0; /* round arrow corner, the shorthand property doesn't accept "inherit" so it is set to 4px */
}

// Button Looking Like Arrow
.btn-arrow(@direction: right; @size: 22px; @radius: @radius-base; @background: @color-bg;) {
  /* Variables */
  @align: (@size / 2 * -1);
  @padding: (sqrt(2) * @size / 2); /* this padding is the width of pointer */
  @padding2: (sqrt(2) * @size);

  position: relative;
  padding-left: @padding;
  padding-right: @padding;

  /* Specific to direction */
  & when (@direction = right) {
    padding-left: @padding2;
  }
  & when (@direction = left) {
    padding-right: @padding2;
  }

  &:before, &:after { /* make two squares (before and after), looking similar to the button */
    .btn-block(@size, @radius);
    /* rotate right arrow squares 45 deg for right, 225 for left */
    & when (@direction = right) {
      transform: rotate(45deg);
    }
    & when (@direction = left) {
      transform: rotate(225deg);
    }
  }

  &:before {
    left: @align; /* align the "before" square to the left */
    & when (@direction = right) {
      background-color: @background
    }
    /* hide arrow tails background */
    & when (@direction = left) {
      z-index: 1;
    }
    /* bring arrow pointers to front */
  }
  &:after {
    right: @align; /* align the "after" square to the right */
    & when (@direction = left) {
      background-color: @background
    }
    /* hide arrow tails background */
    & when (@direction = right) {
      z-index: 1;
    }
    /* bring arrow pointers to front */
  }
}

// Button Pointing to the Right / Left
.btn-pointer(@direction: right; @size: 22px; @radius: @radius-base; @background: @color-bg;) {
  /* Variables */
  @align: (@size / 2 * -1);
  @padding: (sqrt(2) * @size / 2); /* this padding is the width of pointer */
  @padding2: (sqrt(2) * @size);

  position: relative;
  padding-left: @padding;
  padding-right: @padding;

  /* Specific to direction */
  & when (@direction = right) {
    margin-right: @padding2;
  }
  & when (@direction = left) {
    margin-left: @padding2;
  }

  &:before, &:after { /* make two squares (before and after), looking similar to the button */
    .btn-block(@size, @radius);
    /* rotate right arrow squares 45 deg for right, 225 for left */
    & when (@direction = right) {
      transform: rotate(45deg);
    }
    & when (@direction = left) {
      transform: rotate(225deg);
    }
  }

  &:before {
    left: @align; /* align the "before" square to the left */
    & when (@direction = right) {
      display: none;
    }
    /* hide arrow tails background */
    & when (@direction = left) {
      z-index: 1;
    }
    /* bring arrow pointers to front */
  }
  &:after {
    right: @align; /* align the "after" square to the right */
    & when (@direction = left) {
      display: none;
    }
    /* hide arrow tails background */
    & when (@direction = right) {
      z-index: 1;
    }
    /* bring arrow pointers to front */
  }
}
