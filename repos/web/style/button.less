@import "_mixins";
@import "effect";

@paddingTop: 0.8;
@paddingBottom: @paddingTop * 1.2;
@paddingH: @paddingTop * 1;
@button-radius: @radius-base;

.button {
  @paddingCircle: 0.35;
  @small: @size-small;
  @base: @size-base;
  @large: @size-large;
  @background: transparent;
  @backgroundHover: @color-shadow-darkest;
  @font-family: @font-family-secondary;

  .buttonColors();
  .font(@size: @base; @lineHeight: 1; @weight: @font-weight-bold);
  &:extend(.align-center all);
  &:extend(.interaction all);
  &:extend(.pointer all);
  display: inline-flex; // align content in the middle
  position: relative; // for Spinner
  //text-transform: uppercase;
  color: inherit;
  font-family: @font-family;
  background-color: @background;
  border: @border;
  transition: @speed-transition;
  -webkit-backface-visibility: hidden; // smooth the edges for Chrome when using `transform`

  // Interaction
  &:not(:disabled) {
    &:hover, &:focus, &:active {
      &.transparent {
        color: @color-primary;
      }

      font-weight: @font-weight-bold;
      //background-color: @color-shadow-lightest;
    }
  }

  .inverted & {
    color: @color-white;
    border-color: @color-white;
  }

  &:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }

  .sizeScale(@base);

  @{select-icon} {
    font-size: @size-icon; // crisp display fix
    &:before {
      opacity: 1;
    }
  }

  &.small {
    .sizeScale(@small);

    @{select-icon} {
      font-size: @small; // crisp display fix
    }
  }

  &.large {
    .sizeScale(@large);

    @{select-icon} {
      font-size: @size-icon-larger; // crisp display fix
    }
  }

  &.circle {
    //@sizeScale: 1.2; // make icon larger
    //@padding: @paddingTop * unit(@size-base / @size-icon * @size-base / @size-icon); // and padding smaller
    @sizeScale: 1;
    @padding: @paddingCircle;
    .scalePadding(@size: @base * @sizeScale; @top: @padding; @left: @padding;);
    //font-size: @base * @sizeScale;
    letter-spacing: 0 !important;
    transform: none;
    &:extend(.circle);

    @{select-interaction} {
      border-radius: 50% !important;
    }

    &.small {
      //  font-size: @small * @sizeScale;
      .scalePadding(@size: @small * @sizeScale; @top: @padding; @left: @padding;);
    }

    &.large {
      //  font-size: @large * @sizeScale;
      .scalePadding(@size: @large * @sizeScale; @top: @padding; @left: @padding;);
    }
  }

  &.round {
    border-radius: @radius-round !important;
  }

  &.transparent {
    text-shadow: inherit;
    border-color: transparent !important;

    .inverted & {
      color: @color-white;
    }
  }

  &.loading {
    .app__loading {
      margin: -1px;
    }

    .app__spinner {
      &:extend(.app__spinner.base all);
    }

    &.large .app__spinner {
      &:extend(.app__spinner.large all);
    }

    &.small .app__spinner {
      &:extend(.app__spinner.small all);
    }
  }

  &.bg-white {
    &:extend(.bg-white all);

    @{select-interaction} {
      &:extend(.bg-grey-lightest all);
    }
  }

  &.bg-translucent {
    text-shadow: inherit;
    &:extend(.bg-translucent all);

    @{select-interaction} {
      &:extend(.bg-translucent all);
    }
  }

  &.bg-grey {
    &:extend(.bg-grey all);
  }

  &.bg-grey-light {
    &:extend(.bg-grey-light all);
  }

  &.alert {
    .specialColor(@color-alert);
  }

  &.instagram {
    .specialColor(@color-pink);
  }

  &.facebook {
    .specialColor(@color-blue);
  }

  &.vk {
    .specialColor(@color-teal-light);
  }

  .sizeScale(@size) {
    @ratio: @size / @size-base;
    .scalePadding(@size: @size; @top: @paddingTop; @left: @paddingH; @bottom: @paddingBottom;);
    font-size: @size;
    border-radius: size(round(@ratio * px(@button-radius)));
  }
}

// -----------------------------------------------------------------------------
// MIXINS
// -----------------------------------------------------------------------------

.specialColor(@color) {
  color: @color-white;
  border-color: @color-white;
  background-color: @color !important;

  @{select-interaction} {
    color: @color-white !important;
    .outline(@color-white);
  }
}

.buttonColors(@colors: @all-colors; @i: length(@colors);) when (@i > 0) {
  @color: extract(@colors, @i); // color
  .buttonColor(@color;);
  .buttonColors(@colors; (@i - 1);); // iterate
}

.buttonColor(@color: primary) {
  @colorVar: ~'color-@{color}';
  @colorVal: @@colorVar;
  @colorVarLight: ~'color-@{color}-light';
  @colorValLight: @@colorVarLight;

  &.@{color}, .@{color} & {
    color: @color-white;
    background-color: @colorVal;
    border-color: @colorVal;

    &:not(:disabled) {
      @{select-interaction} {
        //color: @colorVal;
        //box-shadow: inset 0 0 0 @border-size @colorVal;
        background-color: darken(@colorVal, 7%);
      }
    }

    .inverted & {
      color: @color-white;
      background-color: @colorValLight;
      border-color: @colorValLight;

      &:not(:disabled) {
        @{select-interaction} {
          //color: @colorValLight;
          //box-shadow: inset 0 0 0 @border-size @colorValLight;
          background-color: lighten(@colorVal, 7%);
        }
      }
    }
  }
}
