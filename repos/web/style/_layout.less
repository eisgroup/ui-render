.flex--col {
  display: flex;
  flex-direction: column;
  position: relative;
}

.flex--col.reverse {
  flex-direction: column-reverse;
}

.flex--col.justify {
  align-items: stretch;
}

.flex--col.left {
  align-items: flex-start;
}

.flex--col.right {
  align-items: flex-end;
}

.flex--col.center {
  align-items: center;
}

.flex--col.middle {
  justify-content: center;
}

.flex--col.top {
  justify-content: flex-start;
}

.flex--col.bottom {
  justify-content: flex-end;
}

.flex--col > .fill-width {
  align-self: stretch;
}

.flex--col > .fill-height {
  flex: 1;
}

.flex--col.no-shrink,
.text.no-shrink,
.flex--row.no-shrink {
  flex-shrink: 0;
}

.flex--col.wrap,
.text.wrap,
.flex--row.wrap {
  flex-wrap: wrap;
}

.text {
  position: relative;
}

.text.row,
.flex--row {
  display: flex;
  flex-direction: row;
  position: relative;
}

.text.reverse,
.flex--row.reverse {
  flex-direction: row-reverse;
}

.text.justify,
.flex--row.justify,
.flex--col.stretch {
  justify-content: space-between;
}

.text.justify--around,
.flex--row.justify--around {
  justify-content: space-around;
}

.flex--col.spread,
.text.spread,
.flex--row.spread {
  justify-content: space-evenly;
}

.text.left,
.flex--row.left {
  justify-content: flex-start;
}

.text.right,
.flex--row.right {
  justify-content: flex-end;
}

.text.center,
.flex--row.center {
  justify-content: center;
}

.text.middle,
.flex--row.middle {
  align-items: center;
}

.text.top,
.flex--row.top {
  align-items: flex-start;
}

.text.bottom,
.flex--row.bottom {
  align-items: flex-end;
}

.text > .fill-width,
.flex--row > .fill-width {
  flex: 1;
}

.text > .fill-height,
.flex--row > .fill-height {
  align-self: stretch;
}

.flex--default {
  flex: 0 1 auto;
}

.flex--fill {
  &:extend(.flex--col);
  &:extend(.fill);
}

.flex--scroll {
  .flex--fill;
  .overflow-scroll;
}

.fill {
  flex: 1;
  align-self: stretch;
}

.fill--half {
  min-width: 50%;
  min-height: 50%;
}

.fill--three-quarter {
  min-width: 75%;
  min-height: 75%;
}

.full-width {
  width: 100%;
}

.full-height {
  height: 100%;
}

.full-screen {
  min-width: 100%;
  min-height: 100%;
}

.min-height {
  min-height: min-content;
}

.min-width {
  min-width: min-content;
}

.min-size-icon {
  min-width: size(20);
  min-height: size(20);
}

.min-size-260 {
  min-width: size(260);
  min-height: size(260);
}

.min-size-290 {
  min-width: size(290);
  min-height: size(290);
}

.min-height-290 {
  min-height: size(290);
}

.min-height-320 {
  min-height: size(320);
}

.min-height-400 {
  min-height: size(400);
}

.min-height-480 {
  min-height: size(480);
}

.min-width-260 {
  min-width: size(260);
}

.min-width-290 {
  min-width: size(290);
}

.min-width-320 {
  min-width: size(320);
}

.width-290 {
  width: size(290);
}

.max-width {
  max-width: 100%;
}

.max-width-290 {
  max-width: size(290);
}

.max-width-320 {
  max-width: size(320);
}

.max-width-360 {
  max-width: size(360);
}

.max-width-390 {
  max-width: size(390);
}

.max-width-400 {
  max-width: size(400);
}

.max-width-430 {
  max-width: size(430);
}

.max-width-500 {
  max-width: size(500);
}

.max-width-600 {
  max-width: size(600);
}

.max-height {
  max-height: 100%;
}

.max-size {
  &:extend(.max-width);
  &:extend(.max-height);
}

.height-auto {
  height: auto;
  min-height: auto;
}

/* Only use this if there are more content to scroll down because of browser `vh` inconsistencies */
// todo: refactor height to use vh because 100% height does not work inside flex with multiple page folds
.cover-screen {
  z-index: 1; // to cover up skewed background below
  position: relative; // for background image :before
  display: flex; // for vertically aligning content
  width: 100%;
  height: 100%; // do not use `vh` because it will overflow in iOS
  min-height: min-content; // prevent content overflow
  &::-webkit-scrollbar {
    display: none;
  }

  &:before { // use for adding filters
    //.filter(blur(0.5px)); // blur background image
  }
}

.overflow-hidden {
  overflow: hidden;
}

.overflow-scroll {
  overflow: auto;
  overflow-y: overlay; // to avoid taking up content space

  /* iOS smooth scrolling - but causes animation content to hide on iOS */
  -webkit-overflow-scrolling: touch;
  //overflow: hidden; // disable to enable scroll on iOS

  &:hover, &:focus, &:active {
    overflow: auto;
    overflow-y: overlay; // to avoid taking up content space
  }
}

.overflow-auto {
  overflow: auto;
}

.overflow-visible {
  overflow: visible;
}

.virtual-list {
  &:extend(.overflow-scroll all);

  &.horizontal {
    //&:extend(.flex--row);
    &.center {
      > div {
        margin: auto;
      }
    }

    > div {
      //&:extend(.flex--row);
      //&:extend(.min-width all);
    }
  }
}

// -----------------------------------------------------------------------------
// ALIGNMENT
// -----------------------------------------------------------------------------

.align-center {
  justify-content: center;
  align-items: center;
  text-align: center;
}

.align-right {
  justify-content: flex-end;
  align-items: flex-end;
  text-align: right;
}

.center-self {
  .flex--col & > {
    align-self: center;
  }

  .flex--row & >,
  .text.row & > {
    justify-self: center;
  }
}

.position-relative {
  position: relative;
}

.position-absolute {
  position: absolute;
}

.position-center {
  position: absolute;
  top: 50%;
  left: 50%;
  right: auto;
  bottom: auto;
  margin-right: -50%; // offset left position to avoid creating scrollbar
  transform: translate(-50%, -50%);
}

.position-middle {
  position: absolute;
  top: 50%;
  bottom: auto;
  transform: translateY(-50%);
}

.position-top {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
}

.position-left {
  position: absolute;
  left: 0;
}

.position-right {
  position: absolute;
  right: 0;
}

.position-top-left {
  position: absolute;
  top: 0;
  left: 0;
}

.position-top-right {
  position: absolute;
  top: 0;
  right: 0;
}


.position-bottom {
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
}

.position-bottom-right {
  position: absolute;
  right: 0;
  bottom: 0;
}

.position-bottom-left {
  position: absolute;
  left: 0;
  bottom: 0;
}

.position-fill {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

.position-fill-fixed {
  &:extend(.position-fill all);
  position: fixed;
}

.rtl {
  direction: rtl;
}

.square {
  // Outer Wrapper
  > .flex--col,
  > .flex--col > canvas {
    height: 100%;
    max-width: 100%;
  }

  // Inner Wrapper
  > .flex--col > .square__inner {
    > .flex--col,
    > .flex--col > canvas {
      width: 100%;
      max-height: 100%;
    }
  }
}
