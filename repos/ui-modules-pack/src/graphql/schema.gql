# =============================================================================
# GRAPHQL SCHEMA
# Type definitions for Clients (may be symlink so that IDE can resolve types)
# =============================================================================
scalar Color # RGB(A) color code format (comma separate string or array of numbers)
scalar Email
scalar JSON
scalar Id # Incremental ID string generated based on Timestamp
scalar LanguageCode # language ISO code
scalar LanguageLevel # key/value pair of language code as `key`, and spoken fluency level as `value`
scalar LanguageLevelRange # key/value pair of language code as `key`, and range of spoken fluency levels as `value`
#scalar LocalString # this is better to be static type defined in project to allow querying speficic language
scalar Password # string with password strength validator
scalar Permissions # key/value pair of permission code as `key`, and boolean as `value` (example: {'1': true, '2': false})
scalar Phones # key/value pair of phone kind as `key`, and number as `value` (example: {'home': '+111', 'work': '+123'})
scalar Timestamp # in milliseconds since the Unix epoch
scalar URL # example: https://example.com
scalar Upload # built-in Graphql Type for File
enum Operator { # must be lower case values to match with MongoDB operators by default
    or
    and
}

# -----------------------------------------------------------------------------
# SUMMARY
# -----------------------------------------------------------------------------
type Query {
    cursor: JSON! # for querying large lists requiring pagination
}

type Mutation {
    _: String
}

type Subscription {
    alerts: [Alert!]!
}


# -----------------------------------------------------------------------------
# COMMON TYPES
# -----------------------------------------------------------------------------

type Action {
    type: String
    payload: JSON
    meta: JSON
    error: Boolean
}

input ActionInput {
    type: String
    payload: JSON
    meta: JSON
}

type Alert {
    id: ID! # created Timestamp
    title: String!
    content: String!
}

type Error {
    status: String
    message: String
    data: JSON
}

type KeyVal {
    key: String
    val: JSON
}

input KeyValInput {
    key: String
    val: JSON
}

type Range {
    min: Int!
    max: Int
}

input RangeInput {
    min: Int!
    max: Int
}

type TimeRange {
    from: Timestamp
    to: Timestamp
}

input TimeRangeInput {
    from: Timestamp
    to: Timestamp
}
